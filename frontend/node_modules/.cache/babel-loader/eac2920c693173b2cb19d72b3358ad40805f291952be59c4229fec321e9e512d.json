{"ast":null,"code":"import Vue from \"vue\";\nimport Vuex from \"vuex\";\nVue.use(Vuex);\nexport default new Vuex.Store({\n  state: {\n    products: [],\n    productTypes: [],\n    // svi produkti koje imam za tip koji trazim\n    productsForType: []\n  },\n  mutations: {\n    addProducts(state, product) {\n      state.products = product;\n    },\n    addProductTypes(state, productType) {\n      state.productTypes = productType;\n    },\n    setProductsForType(state, productsForType) {\n      state.productsForType = productsForType;\n    }\n  },\n  actions: {\n    fetchProducts({\n      commit\n    }) {\n      fetch(\"http://localhost:8000/admin/products/\", {\n        method: \"GET\"\n      }).then(obj => obj.json()).then(res => {\n        commit(\"addProducts\", res.data);\n      });\n    },\n    fetchProductTypes({\n      commit\n    }) {\n      fetch(\"http://localhost:8000/admin/productTypes/\", {\n        method: \"GET\"\n      }).then(obj => obj.json()).then(res => {\n        commit(\"addProductTypes\", res.data);\n      });\n    },\n    async fetchIDsByType({\n      commit,\n      state\n    }, typeID) {\n      const productType = state.productTypes.filter(prodType => prodType.productTypeID === typeID)[0];\n      if (productType) {\n        //resolve(productType);\n      } else {\n        // uhvatim sve produkte koji mi imaju strani kljc dati id\n        fetch(`http://localhost:8000/admin/products/byType/${typeID}`, {\n          method: \"GET\"\n        }).then(obj => obj.json()).then(res => {\n          commit(\"setProductsForType\", res.data);\n        });\n      }\n    }\n  }\n});","map":{"version":3,"names":["Vue","Vuex","use","Store","state","products","productTypes","productsForType","mutations","addProducts","product","addProductTypes","productType","setProductsForType","actions","fetchProducts","commit","fetch","method","then","obj","json","res","data","fetchProductTypes","fetchIDsByType","typeID","filter","prodType","productTypeID"],"sources":["/Users/strahinja/github-classroom/Skript-2022-23/frontend-vuejs-petar-strahinja-ljubicicRN71-20/frontend/src/store/index.js"],"sourcesContent":["import Vue from \"vue\";\nimport Vuex from \"vuex\";\n\nVue.use(Vuex);\n\nexport default new Vuex.Store({\n  state: {\n    products: [],\n    productTypes: [],\n    // svi produkti koje imam za tip koji trazim\n    productsForType: [],\n  },\n  mutations: {\n    addProducts(state, product) {\n      state.products = product;\n    },\n\n    addProductTypes(state, productType) {\n      state.productTypes = productType;\n    },\n    setProductsForType(state, productsForType) {\n      state.productsForType = productsForType;\n    },\n  },\n  actions: {\n    fetchProducts({ commit }) {\n      fetch(\"http://localhost:8000/admin/products/\", {\n        method: \"GET\",\n      })\n        .then((obj) => obj.json())\n        .then((res) => {\n          commit(\"addProducts\", res.data);\n        });\n    },\n\n    fetchProductTypes({ commit }) {\n      fetch(\"http://localhost:8000/admin/productTypes/\", {\n        method: \"GET\",\n      })\n        .then((obj) => obj.json())\n        .then((res) => {\n          commit(\"addProductTypes\", res.data);\n        });\n    },\n    async fetchIDsByType({ commit, state }, typeID) {\n      const productType = state.productTypes.filter(\n        (prodType) => prodType.productTypeID === typeID\n      )[0];\n      if (productType) {\n        //resolve(productType);\n      } else {\n        // uhvatim sve produkte koji mi imaju strani kljc dati id\n        fetch(`http://localhost:8000/admin/products/byType/${typeID}`, {\n          method: \"GET\",\n        })\n          .then((obj) => obj.json())\n          .then((res) => {\n            commit(\"setProductsForType\", res.data);\n          });\n      }\n    },\n  },\n});\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,IAAI,MAAM,MAAM;AAEvBD,GAAG,CAACE,GAAG,CAACD,IAAI,CAAC;AAEb,eAAe,IAAIA,IAAI,CAACE,KAAK,CAAC;EAC5BC,KAAK,EAAE;IACLC,QAAQ,EAAE,EAAE;IACZC,YAAY,EAAE,EAAE;IAChB;IACAC,eAAe,EAAE;EACnB,CAAC;EACDC,SAAS,EAAE;IACTC,WAAW,CAACL,KAAK,EAAEM,OAAO,EAAE;MAC1BN,KAAK,CAACC,QAAQ,GAAGK,OAAO;IAC1B,CAAC;IAEDC,eAAe,CAACP,KAAK,EAAEQ,WAAW,EAAE;MAClCR,KAAK,CAACE,YAAY,GAAGM,WAAW;IAClC,CAAC;IACDC,kBAAkB,CAACT,KAAK,EAAEG,eAAe,EAAE;MACzCH,KAAK,CAACG,eAAe,GAAGA,eAAe;IACzC;EACF,CAAC;EACDO,OAAO,EAAE;IACPC,aAAa,CAAC;MAAEC;IAAO,CAAC,EAAE;MACxBC,KAAK,CAAC,uCAAuC,EAAE;QAC7CC,MAAM,EAAE;MACV,CAAC,CAAC,CACCC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,EAAE,CAAC,CACzBF,IAAI,CAAEG,GAAG,IAAK;QACbN,MAAM,CAAC,aAAa,EAAEM,GAAG,CAACC,IAAI,CAAC;MACjC,CAAC,CAAC;IACN,CAAC;IAEDC,iBAAiB,CAAC;MAAER;IAAO,CAAC,EAAE;MAC5BC,KAAK,CAAC,2CAA2C,EAAE;QACjDC,MAAM,EAAE;MACV,CAAC,CAAC,CACCC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,EAAE,CAAC,CACzBF,IAAI,CAAEG,GAAG,IAAK;QACbN,MAAM,CAAC,iBAAiB,EAAEM,GAAG,CAACC,IAAI,CAAC;MACrC,CAAC,CAAC;IACN,CAAC;IACD,MAAME,cAAc,CAAC;MAAET,MAAM;MAAEZ;IAAM,CAAC,EAAEsB,MAAM,EAAE;MAC9C,MAAMd,WAAW,GAAGR,KAAK,CAACE,YAAY,CAACqB,MAAM,CAC1CC,QAAQ,IAAKA,QAAQ,CAACC,aAAa,KAAKH,MAAM,CAChD,CAAC,CAAC,CAAC;MACJ,IAAId,WAAW,EAAE;QACf;MAAA,CACD,MAAM;QACL;QACAK,KAAK,CAAE,+CAA8CS,MAAO,EAAC,EAAE;UAC7DR,MAAM,EAAE;QACV,CAAC,CAAC,CACCC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,EAAE,CAAC,CACzBF,IAAI,CAAEG,GAAG,IAAK;UACbN,MAAM,CAAC,oBAAoB,EAAEM,GAAG,CAACC,IAAI,CAAC;QACxC,CAAC,CAAC;MACN;IACF;EACF;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}