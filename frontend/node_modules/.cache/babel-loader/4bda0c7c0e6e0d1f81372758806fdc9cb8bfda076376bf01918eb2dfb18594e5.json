{"ast":null,"code":"import { mapActions } from \"vuex\";\nexport default {\n  name: \"Register\",\n  components: {},\n  data() {\n    return {\n      form: {\n        username: \"\",\n        password: \"\",\n        email: \"\",\n        firstName: \"\",\n        lastName: \"\"\n      }\n    };\n  },\n  methods: {\n    //...mapActions([\"register\"]),\n    /*onSubmit(e) {\n      e.preventDefault();\n      const data = {\n        firstName: this.form.firstName,\n        lastName: this.form.lastName,\n        email: this.form.email,\n        username: this.form.username,\n        password: this.form.password,\n      };\n      if (\n        this.validatorEmail &&\n        this.validatorFName &&\n        this.validatorLName &&\n        this.validatorPassword &&\n        this.validatorUsername\n      ) {\n        this.register(data);\n        this.$router.push({ name: \"home\" });\n      }\n    },*/\n  },\n  computed: {\n    validatorUsername() {\n      console.log(\"ispis za name\" + this.form.username);\n      return this.form.username.length >= 3 && this.form.username.length <= 30;\n    },\n    validatorPassword() {\n      return this.form.password.length >= 8 && this.form.password.length <= 256;\n    },\n    validatorEmail() {\n      if (this.form.email.includes(\"@\") && this.form.email.includes(\".\")) return true;\n      return false;\n    },\n    validatorFName() {\n      return this.form.firstName.length >= 1 && this.form.firstName.length <= 128;\n    },\n    validatorLName() {\n      return this.form.lastName.length >= 1 && this.form.lastName.length <= 128;\n    }\n  }\n};","map":{"version":3,"mappings":"AA2FA;AAEA;EACAA;EAEAC;EAEAC;IACA;MACAC;QACAC;QACAC;QACAC;QACAC;QACAC;MACA;IACA;EACA;EAEAC;IACA;IACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAnBA,CAoBA;EACAC;IACAC;MACAC;MACA;IACA;IACAC;MACA;IACA;IACAC;MACA,oEACA;MACA;IACA;IACAC;MACA,OACA;IAEA;IACAC;MACA;IACA;EACA;AACA","names":["name","components","data","form","username","password","email","firstName","lastName","methods","computed","validatorUsername","console","validatorPassword","validatorEmail","validatorFName","validatorLName"],"sourceRoot":"src/views","sources":["RegisterView.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <b-container>\n      <b-form @submit.stop.prevent @submit=\"onSubmit\">\n        <b-form-group label=\"First name:\" label-for=\"firstName\">\n          <b-form-input\n            :state=\"validatorFName\"\n            id=\"firstName\"\n            v-model=\"form.firstName\"\n            type=\"text\"\n            placeholder=\"First name\"\n            required\n          ></b-form-input>\n          <b-form-invalid-feedback :state=\"validatorFName\">\n            First name must contain more than 1 character.\n          </b-form-invalid-feedback>\n        </b-form-group>\n        <b-form-group label=\"Last name:\" label-for=\"lastName\">\n          <b-form-input\n            :state=\"validatorLName\"\n            id=\"lastName\"\n            v-model=\"form.lastName\"\n            type=\"text\"\n            placeholder=\"Last name\"\n            required\n          ></b-form-input>\n          <b-form-invalid-feedback :state=\"validatorLName\">\n            Last name must contain more than 1 character.\n          </b-form-invalid-feedback>\n        </b-form-group>\n        <b-form-group label=\"Email:\" label-for=\"email\">\n          <b-form-input\n            :state=\"validatorEmail\"\n            id=\"email\"\n            v-model=\"form.email\"\n            type=\"email\"\n            placeholder=\"email@example.com\"\n            required\n          ></b-form-input>\n          <b-form-invalid-feedback :state=\"validatorEmail\">\n            That is not a valid email address.\n          </b-form-invalid-feedback>\n        </b-form-group>\n        <b-form-group label=\"Username:\" label-for=\"username\">\n          <b-form-input\n            :state=\"validatorUsername\"\n            id=\"username\"\n            v-model=\"form.username\"\n            type=\"text\"\n            placeholder=\"Username\"\n            required\n          ></b-form-input>\n          <b-form-invalid-feedback :state=\"validatorUsername\">\n            Username must be between 3 and 30 characters.\n          </b-form-invalid-feedback>\n        </b-form-group>\n        <b-form-group label=\"Password:\" label-for=\"password\">\n          <b-form-input\n            :state=\"validatorPassword\"\n            id=\"password\"\n            v-model=\"form.password\"\n            type=\"password\"\n            placeholder=\"Password\"\n            required\n          ></b-form-input>\n          <b-form-invalid-feedback :state=\"validatorUsername\">\n            Password must be between 8 and 256 characters.\n          </b-form-invalid-feedback>\n          <b-form-valid-feedback\n            :state=\"\n              validatorUsername &&\n              validatorPassword &&\n              validatorEmail &&\n              validatorFName &&\n              validatorLName\n            \"\n          >\n          </b-form-valid-feedback>\n        </b-form-group>\n        <b-button-group>\n          <b-button type=\"submit\" variant=\"dark\" id=\"submit\">Sign Up</b-button>\n          <b-button type=\"submit\" variant=\"dark\" id=\"submit\">\n            Go to Sign In\n          </b-button>\n        </b-button-group>\n      </b-form>\n    </b-container>\n  </div>\n</template>\n\n<script>\nimport { mapActions } from \"vuex\";\n\nexport default {\n  name: \"Register\",\n\n  components: {},\n\n  data() {\n    return {\n      form: {\n        username: \"\",\n        password: \"\",\n        email: \"\",\n        firstName: \"\",\n        lastName: \"\",\n      },\n    };\n  },\n\n  methods: {\n    //...mapActions([\"register\"]),\n    /*onSubmit(e) {\n      e.preventDefault();\n      const data = {\n        firstName: this.form.firstName,\n        lastName: this.form.lastName,\n        email: this.form.email,\n        username: this.form.username,\n        password: this.form.password,\n      };\n      if (\n        this.validatorEmail &&\n        this.validatorFName &&\n        this.validatorLName &&\n        this.validatorPassword &&\n        this.validatorUsername\n      ) {\n        this.register(data);\n        this.$router.push({ name: \"home\" });\n      }\n    },*/\n  },\n  computed: {\n    validatorUsername() {\n      console.log(\"ispis za name\" + this.form.username);\n      return this.form.username.length >= 3 && this.form.username.length <= 30;\n    },\n    validatorPassword() {\n      return this.form.password.length >= 8 && this.form.password.length <= 256;\n    },\n    validatorEmail() {\n      if (this.form.email.includes(\"@\") && this.form.email.includes(\".\"))\n        return true;\n      return false;\n    },\n    validatorFName() {\n      return (\n        this.form.firstName.length >= 1 && this.form.firstName.length <= 128\n      );\n    },\n    validatorLName() {\n      return this.form.lastName.length >= 1 && this.form.lastName.length <= 128;\n    },\n  },\n};\n</script>\n<style scoped>\n#app {\n  width: 50%;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 100px;\n}\n#submit {\n  margin-top: 50px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}